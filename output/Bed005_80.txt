For window: 0<---->1000
O_K. So, we're looking for a total of fifty people, not necessarily by any means all students but we'll we'll start with - with that. :: Score(precision=0.4576271186440678, recall=0.9642857142857143, fmeasure=0.6206896551724138)

In parallel with that, we're gonna need to actually do the script. :: Score(precision=0.22033898305084745, recall=1.0, fmeasure=0.3611111111111111)

We also considered using the Berkeley High School and their teachers, maybe, :: Score(precision=0.2033898305084746, recall=1.0, fmeasure=0.33802816901408456)

and get them interested in :: Score(precision=0.0847457627118644, recall=1.0, fmeasure=0.15625)

For window: 200<---->1200
O_K. So, we're looking for a total of fifty people, not necessarily by any means all students but we'll we'll start with - with that. :: Score(precision=0.4166666666666667, recall=0.8928571428571429, fmeasure=0.5681818181818182)

In parallel with that, we're gonna need to actually do the script. :: Score(precision=0.21666666666666667, recall=1.0, fmeasure=0.3561643835616438)

We also considered using the Berkeley High School and their teachers, maybe, :: Score(precision=0.2, recall=1.0, fmeasure=0.33333333333333337)

and get them interested in :: Score(precision=0.08333333333333333, recall=1.0, fmeasure=0.15384615384615385)

That's a good idea. :: Score(precision=0.08333333333333333, recall=1.0, fmeasure=0.15384615384615385)

For window: 400<---->1400
O_K. So, we're looking for a total of fifty people, not necessarily by any means all students but we'll we'll start with - with that. :: Score(precision=0.5294117647058824, recall=0.9642857142857143, fmeasure=0.6835443037974683)

In parallel with that, we're gonna need to actually do the script. :: Score(precision=0.2549019607843137, recall=1.0, fmeasure=0.40625)

We also considered using the Berkeley High School and their teachers, maybe, :: Score(precision=0.21568627450980393, recall=0.9166666666666666, fmeasure=0.3492063492063492)

For window: 600<---->1600
The week after that's Spring Break, and maybe we'll look for them - some subjects next door or :: Score(precision=0.296875, recall=1.0, fmeasure=0.4578313253012048)

Oh, yeah. The high school's a great idea. :: Score(precision=0.125, recall=0.8888888888888888, fmeasure=0.2191780821917808)

Well, yeah. There's one tricky part :: Score(precision=0.09375, recall=0.8571428571428571, fmeasure=0.16901408450704225)

um, they have the right :: Score(precision=0.078125, recall=1.0, fmeasure=0.14492753623188406)

For window: 800<---->1800
completely ignores the verb. :: Score(precision=0.0625, recall=1.0, fmeasure=0.11764705882352941)

parses the the same output, :: Score(precision=0.078125, recall=1.0, fmeasure=0.14492753623188406)

For window: 1000<---->2000
For window: 1200<---->2200
Bhaskara and I started working on the - :: Score(precision=0.09836065573770492, recall=0.8571428571428571, fmeasure=0.17647058823529413)

And, um - and now it's - We have a complete English parser that does everything the German parser does. :: Score(precision=0.3114754098360656, recall=1.0, fmeasure=0.475)

Today O_K. And the - and the time, right? :: Score(precision=0.14754098360655737, recall=1.0, fmeasure=0.2571428571428572)

That's what you need. :: Score(precision=0.08196721311475409, recall=1.0, fmeasure=0.1515151515151515)

For window: 1400<---->2400
Today O_K. And the - and the time, right? :: Score(precision=0.14285714285714285, recall=1.0, fmeasure=0.25)

That's what you need. :: Score(precision=0.07936507936507936, recall=1.0, fmeasure=0.14705882352941177)

For window: 1600<---->2600
completely ignores the verb. :: Score(precision=0.06557377049180328, recall=1.0, fmeasure=0.12307692307692307)

So, if you want to look at the templates, :: Score(precision=0.14754098360655737, recall=1.0, fmeasure=0.2571428571428572)

they're conveniently located in a file, "template". :: Score(precision=0.13114754098360656, recall=1.0, fmeasure=0.23188405797101452)

In the other order? :: Score(precision=0.06557377049180328, recall=1.0, fmeasure=0.12307692307692307)

with those two key words? :: Score(precision=0.08196721311475409, recall=1.0, fmeasure=0.1515151515151515)

Should we try it? :: Score(precision=0.06557377049180328, recall=1.0, fmeasure=0.12307692307692307)

For window: 1800<---->2800
in that there's some :: Score(precision=0.0847457627118644, recall=1.0, fmeasure=0.15625)

And, of course, you can have :: Score(precision=0.1016949152542373, recall=1.0, fmeasure=0.18461538461538463)

many variations in those sentences, they will still parse fine. :: Score(precision=0.1694915254237288, recall=1.0, fmeasure=0.2898550724637681)

So, in a sense it's pretty broad. :: Score(precision=0.13559322033898305, recall=1.0, fmeasure=0.23880597014925373)

For window: 2000<---->3000
Um. What's an idiomatic of phrasing this? Which films are :: Score(precision=0.1694915254237288, recall=0.9090909090909091, fmeasure=0.2857142857142857)

Are playing at the cinema? :: Score(precision=0.0847457627118644, recall=1.0, fmeasure=0.15625)

I changed that file, actually, where it's on my account. :: Score(precision=0.1864406779661017, recall=1.0, fmeasure=0.3142857142857143)

Actually, you would say, "which films are on tonight?" :: Score(precision=0.15254237288135594, recall=1.0, fmeasure=0.2647058823529412)

This - this evening? :: Score(precision=0.05084745762711865, recall=1.0, fmeasure=0.0967741935483871)

Um. I have no net here. :: Score(precision=0.1016949152542373, recall=1.0, fmeasure=0.18461538461538463)

For window: 2200<---->3200
So what it probably does, is it takes the, uh, :: Score(precision=0.1724137931034483, recall=1.0, fmeasure=0.29411764705882354)

Is this where it is? This is already the X_M_L stuff? :: Score(precision=0.20689655172413793, recall=0.9230769230769231, fmeasure=0.3380281690140845)

This is where it takes its own, um, syntax, :: Score(precision=0.13793103448275862, recall=0.8888888888888888, fmeasure=0.23880597014925373)

So, this is - :: Score(precision=0.05172413793103448, recall=1.0, fmeasure=0.09836065573770492)

For window: 2400<---->3400
And the value of the score is, I assume, :: Score(precision=0.14035087719298245, recall=0.8888888888888888, fmeasure=0.24242424242424243)

I guess, the more of these optional things that are actually in there, the higher the score :: Score(precision=0.2982456140350877, recall=1.0, fmeasure=0.45945945945945943)

So we - we shouldn't belittle it too much. It's doing something, :: Score(precision=0.22807017543859648, recall=1.0, fmeasure=0.3714285714285714)

and it's very flexible. :: Score(precision=0.08771929824561403, recall=1.0, fmeasure=0.16129032258064516)

For window: 2600<---->3600
that the uh - :: Score(precision=0.02654867256637168, recall=1.0, fmeasure=0.05172413793103448)

I guess, the more of these optional things that are actually in there, the higher the score :: Score(precision=0.1504424778761062, recall=1.0, fmeasure=0.26153846153846155)

Um, let's hope that the generation will not be more difficult, even though the generator is a little bit more complex. :: Score(precision=0.18584070796460178, recall=0.9545454545454546, fmeasure=0.3111111111111111)

Uh but we'll - :: Score(precision=0.035398230088495575, recall=1.0, fmeasure=0.06837606837606837)

that means we may need two hours and twenty minutes rather than an hour ten minutes, :: Score(precision=0.1415929203539823, recall=1.0, fmeasure=0.24806201550387597)

So what it probably does, is it takes the, uh, :: Score(precision=0.08849557522123894, recall=1.0, fmeasure=0.1626016260162602)

So, whenever it - it encounters "Goodbye", :: Score(precision=0.05309734513274336, recall=1.0, fmeasure=0.10084033613445377)

which we can make it do in a second, here :: Score(precision=0.08849557522123894, recall=1.0, fmeasure=0.1626016260162602)

That function automatically generates an initialized :: Score(precision=0.05309734513274336, recall=1.0, fmeasure=0.10084033613445377)

of how we can do it. :: Score(precision=0.04424778761061947, recall=0.8333333333333334, fmeasure=0.08403361344537814)

we can do that. :: Score(precision=0.035398230088495575, recall=1.0, fmeasure=0.06837606837606837)

uh, X_M_ L structures, :: Score(precision=0.04424778761061947, recall=1.0, fmeasure=0.0847457627118644)

that's where it - :: Score(precision=0.035398230088495575, recall=1.0, fmeasure=0.06837606837606837)

but I, uh, um, :: Score(precision=0.035398230088495575, recall=1.0, fmeasure=0.06837606837606837)

So, this is - :: Score(precision=0.02654867256637168, recall=1.0, fmeasure=0.05172413793103448)

I mean this is :: Score(precision=0.035398230088495575, recall=1.0, fmeasure=0.06837606837606837)

For window: 2800<---->3800
to say, "O_K let's now pretend we actually wanted to not only change the - :: Score(precision=0.13725490196078433, recall=0.875, fmeasure=0.23728813559322037)

the mapping of - of, uh, words to the M_-three-L_ but we also wanted to change - add a new sentence type and and make up some - some new M_-three-L_ - s-" :: Score(precision=0.3137254901960784, recall=0.9696969696969697, fmeasure=0.4740740740740741)

That'd be great. It would be a good exercise to just see :: Score(precision=0.12745098039215685, recall=1.0, fmeasure=0.22608695652173913)

whether one can get that to run. :: Score(precision=0.06862745098039216, recall=1.0, fmeasure=0.12844036697247707)

Yeah, so where are those - those functions "Action", "Goodbye", and so on, right? Are they actually, um, :: Score(precision=0.1568627450980392, recall=0.9411764705882353, fmeasure=0.2689075630252101)

For window: 3000<---->4000
activate those classes in the - in the X_M_L stuff :: Score(precision=0.2, recall=1.0, fmeasure=0.33333333333333337)

I saw those actions - uh, the "Goodbye" stuff somewhere. :: Score(precision=0.16363636363636364, recall=1.0, fmeasure=0.28125)

But there is some kind of function call, because how does it know to put Goodbye in Content, but, uh, Confirm in Features? :: Score(precision=0.4, recall=0.9565217391304348, fmeasure=0.5641025641025641)

For window: 3200<---->4200
So, whenever it - it encounters "Goodbye", :: Score(precision=0.08771929824561403, recall=0.8333333333333334, fmeasure=0.15873015873015872)

which we can make it do in a second, here :: Score(precision=0.17543859649122806, recall=1.0, fmeasure=0.29850746268656714)

That function automatically generates an initialized :: Score(precision=0.10526315789473684, recall=1.0, fmeasure=0.1904761904761905)

Well, they're defined somewhere, presumably. :: Score(precision=0.10526315789473684, recall=1.0, fmeasure=0.1904761904761905)

Well, it just automatically initializes things that are common, right? So it's just a shorthand. :: Score(precision=0.2807017543859649, recall=1.0, fmeasure=0.4383561643835616)

A "not a number" is a value. Awesome. :: Score(precision=0.12280701754385964, recall=0.875, fmeasure=0.2153846153846154)

we can do that. :: Score(precision=0.07017543859649122, recall=1.0, fmeasure=0.13114754098360656)

For window: 3400<---->4400
So, whenever it - it encounters "Goodbye", :: Score(precision=0.1, recall=0.8333333333333334, fmeasure=0.17857142857142858)

When there's a feature. :: Score(precision=0.1, recall=1.0, fmeasure=0.18181818181818182)

There is a feature called "Discourse-Status", :: Score(precision=0.14, recall=1.0, fmeasure=0.24561403508771928)

And so whenever I just say, "Write", :: Score(precision=0.14, recall=1.0, fmeasure=0.24561403508771928)

it will - it will put this in here. :: Score(precision=0.16, recall=1.0, fmeasure=0.2758620689655173)

But there is some kind of function call, because how does it know to put Goodbye in Content, but, uh, Confirm in Features? :: Score(precision=0.46, recall=1.0, fmeasure=0.6301369863013699)

So, this is - :: Score(precision=0.06, recall=1.0, fmeasure=0.11320754716981131)

For window: 3600<---->4600
It is not - :: Score(precision=0.041666666666666664, recall=1.0, fmeasure=0.07999999999999999)

This - this evening? :: Score(precision=0.041666666666666664, recall=1.0, fmeasure=0.07999999999999999)

This is sort of what happens. :: Score(precision=0.06944444444444445, recall=0.8333333333333334, fmeasure=0.12820512820512822)

This is sort of the uh, um, :: Score(precision=0.08333333333333333, recall=0.8571428571428571, fmeasure=0.1518987341772152)

even though it - you can't see it on - on this resolution. :: Score(precision=0.16666666666666666, recall=1.0, fmeasure=0.2857142857142857)

And this is what it - sort of is the - the structure of Map requests, :: Score(precision=0.18055555555555555, recall=0.9285714285714286, fmeasure=0.3023255813953489)

also not very interesting, :: Score(precision=0.05555555555555555, recall=1.0, fmeasure=0.10526315789473684)

and here is the more interesting stuff for us, is the routes, :: Score(precision=0.16666666666666666, recall=1.0, fmeasure=0.2857142857142857)

So, this is - :: Score(precision=0.041666666666666664, recall=1.0, fmeasure=0.07999999999999999)

For window: 3800<---->4800
So, is - Is that :: Score(precision=0.041666666666666664, recall=1.0, fmeasure=0.07999999999999999)

It is not - :: Score(precision=0.03125, recall=1.0, fmeasure=0.06060606060606061)

So, yeah. I definitely think it's - :: Score(precision=0.07291666666666667, recall=1.0, fmeasure=0.13592233009708737)

the exercise of trying to :: Score(precision=0.052083333333333336, recall=1.0, fmeasure=0.09900990099009901)

First of all, I was little bit - :: Score(precision=0.07291666666666667, recall=1.0, fmeasure=0.13592233009708737)

It seemed to me that this way of doing it is sort of a a step backwards from the way we've done it before. :: Score(precision=0.2604166666666667, recall=1.0, fmeasure=0.4132231404958678)

So these are - these are - :: Score(precision=0.052083333333333336, recall=1.0, fmeasure=0.09900990099009901)

So these are - these are your friends back at E_M_L. :: Score(precision=0.125, recall=1.0, fmeasure=0.2222222222222222)

So this is not a complicated negotiation. :: Score(precision=0.07291666666666667, recall=1.0, fmeasure=0.13592233009708737)

There's - there's not seven committees, or anything, right? :: Score(precision=0.10416666666666667, recall=1.0, fmeasure=0.18867924528301885)

No, this is very straightforward. :: Score(precision=0.052083333333333336, recall=1.0, fmeasure=0.09900990099009901)

So, this is - :: Score(precision=0.03125, recall=1.0, fmeasure=0.06060606060606061)

For window: 4000<---->5000
It is not - :: Score(precision=0.045454545454545456, recall=1.0, fmeasure=0.08695652173913045)

I got the, uh, M_-three-L_ for the routes today. :: Score(precision=0.15151515151515152, recall=0.9090909090909091, fmeasure=0.25974025974025977)

This is sort of the uh, um, :: Score(precision=0.09090909090909091, recall=0.8571428571428571, fmeasure=0.1643835616438356)

And this is what it - sort of is the - the structure of Map requests, :: Score(precision=0.19696969696969696, recall=0.9285714285714286, fmeasure=0.32499999999999996)

also not very interesting, :: Score(precision=0.06060606060606061, recall=1.0, fmeasure=0.1142857142857143)

I asked them whether or not we could, um - :: Score(precision=0.13636363636363635, recall=1.0, fmeasure=0.24000000000000002)

It seemed to me that this way of doing it is sort of a a step backwards from the way we've done it before. :: Score(precision=0.3787878787878788, recall=1.0, fmeasure=0.5494505494505494)

For window: 4200<---->5200
that the uh - :: Score(precision=0.02830188679245283, recall=1.0, fmeasure=0.055045871559633024)

it should do that. :: Score(precision=0.03773584905660377, recall=1.0, fmeasure=0.07272727272727272)

I got the, uh, M_-three-L_ for the routes today. :: Score(precision=0.10377358490566038, recall=1.0, fmeasure=0.18803418803418803)

This is sort of the uh, um, :: Score(precision=0.05660377358490566, recall=0.8571428571428571, fmeasure=0.10619469026548672)

I asked them whether or not we could, um - :: Score(precision=0.08490566037735849, recall=1.0, fmeasure=0.15652173913043477)

It seemed to me that this way of doing it is sort of a a step backwards from the way we've done it before. :: Score(precision=0.2358490566037736, recall=1.0, fmeasure=0.38167938931297707)

suggested that they should be - uh, kind enough to do two things for us, is one, um, :: Score(precision=0.1320754716981132, recall=0.8235294117647058, fmeasure=0.22764227642276422)

Also allocating, uh, some tags for our Action Schema Enter-Vista-Approach, :: Score(precision=0.10377358490566038, recall=0.9166666666666666, fmeasure=0.18644067796610173)

um, since you had suggested that - :: Score(precision=0.05660377358490566, recall=1.0, fmeasure=0.10714285714285715)

that, um, we figure out if we ever, for a demo reason, wanted to shortcut directly to the G_I_S and the Planner, :: Score(precision=0.2169811320754717, recall=0.9583333333333334, fmeasure=0.35384615384615387)

For window: 4400<---->5400
that the uh - :: Score(precision=0.033707865168539325, recall=1.0, fmeasure=0.06521739130434782)

This is sort of the uh, um, :: Score(precision=0.07865168539325842, recall=1.0, fmeasure=0.14583333333333334)

It seemed to me that this way of doing it is sort of a a step backwards from the way we've done it before. :: Score(precision=0.2808988764044944, recall=1.0, fmeasure=0.4385964912280702)

suggested that they should be - uh, kind enough to do two things for us, is one, um, :: Score(precision=0.19101123595505617, recall=1.0, fmeasure=0.32075471698113206)

Also allocating, uh, some tags for our Action Schema Enter-Vista-Approach, :: Score(precision=0.1348314606741573, recall=1.0, fmeasure=0.23762376237623764)

that, um, we figure out if we ever, for a demo reason, wanted to shortcut directly to the G_I_S and the Planner, :: Score(precision=0.2696629213483146, recall=1.0, fmeasure=0.4247787610619469)

For window: 4600<---->5600
suggested that they should be - uh, kind enough to do two things for us, is one, um, :: Score(precision=0.21739130434782608, recall=0.8823529411764706, fmeasure=0.34883720930232553)

Also allocating, uh, some tags for our Action Schema Enter-Vista-Approach, :: Score(precision=0.17391304347826086, recall=1.0, fmeasure=0.29629629629629634)

that, um, we figure out if we ever, for a demo reason, wanted to shortcut directly to the G_I_S and the Planner, :: Score(precision=0.34782608695652173, recall=1.0, fmeasure=0.5161290322580645)

For window: 4800<---->5800
suggested that they should be - uh, kind enough to do two things for us, is one, um, :: Score(precision=0.23333333333333334, recall=0.8235294117647058, fmeasure=0.3636363636363636)

Also allocating, uh, some tags for our Action Schema Enter-Vista-Approach, :: Score(precision=0.2, recall=1.0, fmeasure=0.33333333333333337)

that, um, we figure out if we ever, for a demo reason, wanted to shortcut directly to the G_I_S and the Planner, :: Score(precision=0.38333333333333336, recall=0.9583333333333334, fmeasure=0.5476190476190476)

of how we can do it. :: Score(precision=0.1, recall=1.0, fmeasure=0.18181818181818182)

we can do that. :: Score(precision=0.06666666666666667, recall=1.0, fmeasure=0.125)

For window: 5000<---->6000
a good idea to :: Score(precision=0.06153846153846154, recall=1.0, fmeasure=0.11594202898550725)

uh, change requests we make of them. :: Score(precision=0.1076923076923077, recall=1.0, fmeasure=0.19444444444444445)

So it seemed to me, what we ought to do is get our story together. :: Score(precision=0.23076923076923078, recall=1.0, fmeasure=0.375)

O_K? And think about it some, internally, before :: Score(precision=0.13846153846153847, recall=1.0, fmeasure=0.24324324324324326)

asking them to make changes. :: Score(precision=0.07692307692307693, recall=1.0, fmeasure=0.14285714285714288)

And - so that sounds like a great thing to do :: Score(precision=0.15384615384615385, recall=1.0, fmeasure=0.2666666666666667)

as the priority item :: Score(precision=0.06153846153846154, recall=1.0, fmeasure=0.11594202898550725)

we have to get them to - :: Score(precision=0.07692307692307693, recall=0.8333333333333334, fmeasure=0.14084507042253522)

For window: 5200<---->6200
For window: 5400<---->6400
How - how would we try to characterize those and what do we want to request now :: Score(precision=0.2222222222222222, recall=1.0, fmeasure=0.3636363636363636)

that's leave enough space to do all that stuff? :: Score(precision=0.1388888888888889, recall=1.0, fmeasure=0.24390243902439027)

Then the scope of this is beyond :: Score(precision=0.09722222222222222, recall=1.0, fmeasure=0.17721518987341772)

For window: 5600<---->6600
and - the - uh, description - :: Score(precision=0.07692307692307693, recall=1.0, fmeasure=0.14285714285714288)

We have just commissioned someone to translate some bits of it, I_E the :: Score(precision=0.2692307692307692, recall=1.0, fmeasure=0.42424242424242425)

For window: 5800<---->6800
tourists in Heidelberg. It seems to me we can get :: Score(precision=0.19230769230769232, recall=1.0, fmeasure=0.32258064516129037)

all the complexity we want in actions and in language :: Score(precision=0.19230769230769232, recall=1.0, fmeasure=0.32258064516129037)

And, again, this is in the this is also pretty well formed because there is an ontology, :: Score(precision=0.3269230769230769, recall=1.0, fmeasure=0.4927536231884058)

For window: 6000<---->7000
we don't have to :: Score(precision=0.11363636363636363, recall=1.0, fmeasure=0.20408163265306123)

That is, tourists in Heidelberg. :: Score(precision=0.11363636363636363, recall=1.0, fmeasure=0.20408163265306123)

And if there's something somebody comes up with that can't be done that way, then, sure. we'll - we'll look at that, but :: Score(precision=0.5227272727272727, recall=0.8846153846153846, fmeasure=0.6571428571428571)

For window: 6200<---->7200
do have concrete reference. Although the To get at them from a language may not be trivial. :: Score(precision=0.234375, recall=0.8823529411764706, fmeasure=0.37037037037037035)

really deep mysteries about :: Score(precision=0.0625, recall=1.0, fmeasure=0.11764705882352941)

um, what what things the system knows about. :: Score(precision=0.125, recall=1.0, fmeasure=0.2222222222222222)

Right. And you have both proper names and descriptions and and you can ask for it. :: Score(precision=0.21875, recall=0.875, fmeasure=0.35)

And, again, it's just a question of which of these things, :: Score(precision=0.1875, recall=1.0, fmeasure=0.3157894736842105)

we have to get them to - :: Score(precision=0.078125, recall=0.8333333333333334, fmeasure=0.14285714285714285)

For window: 6400<---->7400
Could you give me an example of a reference problem? so - so I can make it more concrete? :: Score(precision=0.26865671641791045, recall=1.0, fmeasure=0.42352941176470593)

How do I get to the Powder-Tower? :: Score(precision=0.11940298507462686, recall=1.0, fmeasure=0.21333333333333335)

We don't know how to handle the declarative forms, :: Score(precision=0.14925373134328357, recall=1.0, fmeasure=0.2597402597402597)

For window: 6600<---->7600
fit together. There's this whole framework problem that I'm feeling really uncomfortable about. :: Score(precision=0.29545454545454547, recall=0.8666666666666667, fmeasure=0.44067796610169496)

all the standard metaphor examples and make question :: Score(precision=0.18181818181818182, recall=1.0, fmeasure=0.3076923076923077)

We don't know how to handle the declarative forms, :: Score(precision=0.22727272727272727, recall=1.0, fmeasure=0.37037037037037035)

For window: 6800<---->7800
of how we can do it. :: Score(precision=0.10909090909090909, recall=1.0, fmeasure=0.19672131147540983)

all the standard metaphor examples and make question :: Score(precision=0.14545454545454545, recall=1.0, fmeasure=0.25396825396825395)

We don't know how to handle the declarative forms, :: Score(precision=0.18181818181818182, recall=1.0, fmeasure=0.3076923076923077)

For window: 7000<---->8000
Uh, you know - :: Score(precision=0.0379746835443038, recall=1.0, fmeasure=0.07317073170731708)

And how soon, I don't know. :: Score(precision=0.08860759493670886, recall=1.0, fmeasure=0.1627906976744186)

I mean, uh, we could take :: Score(precision=0.0759493670886076, recall=1.0, fmeasure=0.1411764705882353)

all the standard metaphor examples and make question :: Score(precision=0.10126582278481013, recall=1.0, fmeasure=0.18390804597701146)

Yeah, or, you know. why is he - why is he pushing for promotion?" or, "who's pushing proof-" er, just pick - pick any of them and just :: Score(precision=0.34177215189873417, recall=1.0, fmeasure=0.5094339622641509)

do the - eh - :: Score(precision=0.0379746835443038, recall=1.0, fmeasure=0.07317073170731708)

And I don't know. :: Score(precision=0.06329113924050633, recall=1.0, fmeasure=0.11904761904761907)

For window: 7200<---->8200
of this big system, which, in German, :: Score(precision=0.1206896551724138, recall=1.0, fmeasure=0.21538461538461542)

And one of our jobs was to make the English equivalent of that. :: Score(precision=0.22413793103448276, recall=1.0, fmeasure=0.36619718309859156)

For window: 7400<---->8400
that the uh - :: Score(precision=0.047619047619047616, recall=1.0, fmeasure=0.0909090909090909)

how can we sort of :: Score(precision=0.07936507936507936, recall=1.0, fmeasure=0.14705882352941177)

run our our text, our content, through a machine that will enable us, later, to :: Score(precision=0.23809523809523808, recall=1.0, fmeasure=0.3846153846153846)

retrieve or answer questions more sensibly? :: Score(precision=0.09523809523809523, recall=1.0, fmeasure=0.17391304347826084)

what is the - the basic thing that - that you are, um, obligated to do, um, uh, by the summer before uh we can move - :: Score(precision=0.3492063492063492, recall=0.9166666666666666, fmeasure=0.5057471264367815)

For window: 7600<---->8600
So, is - Is that :: Score(precision=0.0380952380952381, recall=1.0, fmeasure=0.07339449541284404)

So this sentence - :: Score(precision=0.02857142857142857, recall=1.0, fmeasure=0.05555555555555556)

that the uh - :: Score(precision=0.02857142857142857, recall=1.0, fmeasure=0.05555555555555556)

What was the sentence? :: Score(precision=0.0380952380952381, recall=1.0, fmeasure=0.07339449541284404)

one of these days, :: Score(precision=0.0380952380952381, recall=1.0, fmeasure=0.07339449541284404)

do the - eh - :: Score(precision=0.02857142857142857, recall=1.0, fmeasure=0.05555555555555556)

we can do that. :: Score(precision=0.0380952380952381, recall=1.0, fmeasure=0.07339449541284404)

there's this, eh, uh - Robert was describing :: Score(precision=0.0761904761904762, recall=1.0, fmeasure=0.14159292035398233)

the - There's two packages there's a, :: Score(precision=0.0761904761904762, recall=1.0, fmeasure=0.14159292035398233)

of this big system, which, in German, :: Score(precision=0.06666666666666667, recall=1.0, fmeasure=0.125)

uh, takes these sentence templates and produces X_M_L structures. :: Score(precision=0.10476190476190476, recall=1.0, fmeasure=0.1896551724137931)

And one of our jobs was to make the English equivalent of that. :: Score(precision=0.12380952380952381, recall=1.0, fmeasure=0.22033898305084745)

That, these guys did in a - in a day. :: Score(precision=0.08571428571428572, recall=1.0, fmeasure=0.15789473684210528)

uh, X_M_ L structures, :: Score(precision=0.047619047619047616, recall=1.0, fmeasure=0.0909090909090909)

Um - is this, uh - :: Score(precision=0.0380952380952381, recall=1.0, fmeasure=0.07339449541284404)

For window: 7800<---->8800
So, is - Is that :: Score(precision=0.03636363636363636, recall=1.0, fmeasure=0.07017543859649122)

So this sentence - :: Score(precision=0.02727272727272727, recall=1.0, fmeasure=0.053097345132743355)

that the uh - :: Score(precision=0.02727272727272727, recall=1.0, fmeasure=0.053097345132743355)

What was the sentence? :: Score(precision=0.03636363636363636, recall=1.0, fmeasure=0.07017543859649122)

one of these days, :: Score(precision=0.03636363636363636, recall=1.0, fmeasure=0.07017543859649122)

do the - eh - :: Score(precision=0.02727272727272727, recall=1.0, fmeasure=0.053097345132743355)

So, uh - So, uh, I was just going to ask, um, so, :: Score(precision=0.09090909090909091, recall=0.8333333333333334, fmeasure=0.16393442622950818)

what is the - the basic thing that - that you are, um, obligated to do, um, uh, by the summer before uh we can move - :: Score(precision=0.2, recall=0.9166666666666666, fmeasure=0.3283582089552239)

O_K. So - eh - Yeah. So, what happened is, :: Score(precision=0.07272727272727272, recall=0.8888888888888888, fmeasure=0.13445378151260504)

there's this, eh, uh - Robert was describing :: Score(precision=0.07272727272727272, recall=1.0, fmeasure=0.13559322033898305)

the - There's two packages there's a, :: Score(precision=0.07272727272727272, recall=1.0, fmeasure=0.13559322033898305)

uh, quote parser, there's a particular piece :: Score(precision=0.07272727272727272, recall=1.0, fmeasure=0.13559322033898305)

of this big system, which, in German, :: Score(precision=0.06363636363636363, recall=1.0, fmeasure=0.11965811965811964)

uh, takes these sentence templates and produces X_M_L structures. :: Score(precision=0.1, recall=1.0, fmeasure=0.18181818181818182)

And one of our jobs was to make the English equivalent of that. :: Score(precision=0.11818181818181818, recall=1.0, fmeasure=0.21138211382113822)

That, these guys did in a - in a day. :: Score(precision=0.08181818181818182, recall=1.0, fmeasure=0.15126050420168066)

uh, X_M_ L structures, :: Score(precision=0.045454545454545456, recall=1.0, fmeasure=0.08695652173913045)

Well, I was O_K. Yeah. :: Score(precision=0.045454545454545456, recall=0.8333333333333334, fmeasure=0.08620689655172414)

Um - is this, uh - :: Score(precision=0.03636363636363636, recall=1.0, fmeasure=0.07017543859649122)

For window: 8000<---->9000
So, is - Is that :: Score(precision=0.03508771929824561, recall=1.0, fmeasure=0.06779661016949151)

one of these days, :: Score(precision=0.03508771929824561, recall=1.0, fmeasure=0.06779661016949151)

there's this, eh, uh - Robert was describing :: Score(precision=0.07017543859649122, recall=1.0, fmeasure=0.13114754098360656)

the - There's two packages there's a, :: Score(precision=0.07017543859649122, recall=1.0, fmeasure=0.13114754098360656)

And one of our jobs was to make the English equivalent of that. :: Score(precision=0.11403508771929824, recall=1.0, fmeasure=0.2047244094488189)

That, these guys did in a - in a day. :: Score(precision=0.07894736842105263, recall=1.0, fmeasure=0.14634146341463414)

all along was viewed as a kind of - :: Score(precision=0.07017543859649122, recall=1.0, fmeasure=0.13114754098360656)

a a minor thing, :: Score(precision=0.03508771929824561, recall=1.0, fmeasure=0.06779661016949151)

necessary, but - but not - :: Score(precision=0.03508771929824561, recall=1.0, fmeasure=0.06779661016949151)

And much more interesting is the fact that, :: Score(precision=0.07017543859649122, recall=1.0, fmeasure=0.13114754098360656)

as part of doing this, we - we are, :: Score(precision=0.06140350877192982, recall=0.875, fmeasure=0.11475409836065574)

you know, inheriting this system that does all of these other :: Score(precision=0.07894736842105263, recall=0.8181818181818182, fmeasure=0.144)

Not precisely what we want, and that's - :: Score(precision=0.07017543859649122, recall=1.0, fmeasure=0.13114754098360656)

that's where it - :: Score(precision=0.03508771929824561, recall=1.0, fmeasure=0.06779661016949151)

But, I - I - :: Score(precision=0.02631578947368421, recall=1.0, fmeasure=0.05128205128205127)

So, this is - :: Score(precision=0.02631578947368421, recall=1.0, fmeasure=0.05128205128205127)

For window: 8200<---->9200
specification for the X_M_L :: Score(precision=0.05434782608695652, recall=0.8333333333333334, fmeasure=0.1020408163265306)

uh, X_M_ L structures, :: Score(precision=0.05434782608695652, recall=1.0, fmeasure=0.10309278350515463)

produces an output X_M_L structure which is :: Score(precision=0.08695652173913043, recall=0.8888888888888888, fmeasure=0.15841584158415842)

instructions for the generator. :: Score(precision=0.043478260869565216, recall=1.0, fmeasure=0.08333333333333333)

O_K? And then there's a language generator, and then after that a a synthesizer that :: Score(precision=0.18478260869565216, recall=1.0, fmeasure=0.3119266055045872)

goes from an X_M_L structure to, :: Score(precision=0.08695652173913043, recall=1.0, fmeasure=0.16)

uh, language generation, to :: Score(precision=0.043478260869565216, recall=1.0, fmeasure=0.08333333333333333)

actual specifications for a synthesizer. :: Score(precision=0.05434782608695652, recall=1.0, fmeasure=0.10309278350515463)

And much more interesting is the fact that, :: Score(precision=0.08695652173913043, recall=1.0, fmeasure=0.16)

as part of doing this, we - we are, :: Score(precision=0.08695652173913043, recall=1.0, fmeasure=0.16)

you know, inheriting this system that does all of these other :: Score(precision=0.09782608695652174, recall=0.8181818181818182, fmeasure=0.17475728155339806)

Not precisely what we want, and that's - :: Score(precision=0.08695652173913043, recall=1.0, fmeasure=0.16)

that's where it - :: Score(precision=0.043478260869565216, recall=1.0, fmeasure=0.08333333333333333)

And then, for other, :: Score(precision=0.043478260869565216, recall=1.0, fmeasure=0.08333333333333333)

For window: 8400<---->9400
So, is - Is that :: Score(precision=0.05714285714285714, recall=1.0, fmeasure=0.1081081081081081)

and, um, get a first draft of that. :: Score(precision=0.11428571428571428, recall=1.0, fmeasure=0.20512820512820512)

we want to have :: Score(precision=0.05714285714285714, recall=1.0, fmeasure=0.1081081081081081)

this kind of structure in our Bayes-nets. :: Score(precision=0.11428571428571428, recall=1.0, fmeasure=0.20512820512820512)

Namely, that, um - You have these nodes that have several bands, right? So - :: Score(precision=0.17142857142857143, recall=0.9230769230769231, fmeasure=0.2891566265060241)

Does I mean, they sort of - :: Score(precision=0.08571428571428572, recall=1.0, fmeasure=0.15789473684210528)

the typical example is that, um, these are all a bunch of cues for something, and this is a certain effect that we'd like to conclude. :: Score(precision=0.37142857142857144, recall=0.9629629629629629, fmeasure=0.5360824742268041)

So, this is - :: Score(precision=0.04285714285714286, recall=1.0, fmeasure=0.0821917808219178)

I mean this is :: Score(precision=0.05714285714285714, recall=1.0, fmeasure=0.1081081081081081)

For window: 8600<---->9600
So, this is - :: Score(precision=0.061224489795918366, recall=1.0, fmeasure=0.11538461538461538)

write it out for - :: Score(precision=0.08163265306122448, recall=1.0, fmeasure=0.15094339622641506)

So, I mean, we'd like to - take all these various cues, right? So this one might be, say, uh - :: Score(precision=0.40816326530612246, recall=1.0, fmeasure=0.5797101449275363)

Like the army. Yeah. :: Score(precision=0.08163265306122448, recall=1.0, fmeasure=0.15094339622641506)

Noisy-ORs are a way to, uh, :: Score(precision=0.14285714285714285, recall=1.0, fmeasure=0.25)

sort of deal with this. :: Score(precision=0.10204081632653061, recall=1.0, fmeasure=0.1851851851851852)

I mean this is :: Score(precision=0.08163265306122448, recall=1.0, fmeasure=0.15094339622641506)

For window: 8800<---->9800
Uh, you know - :: Score(precision=0.061224489795918366, recall=1.0, fmeasure=0.11538461538461538)

Noisy-ORs are a way to, uh, :: Score(precision=0.14285714285714285, recall=1.0, fmeasure=0.25)

sort of deal with this. :: Score(precision=0.10204081632653061, recall=1.0, fmeasure=0.1851851851851852)

So, the idea is that, um, :: Score(precision=0.10204081632653061, recall=0.8333333333333334, fmeasure=0.18181818181818182)

The idea is to have these intermediate nodes. :: Score(precision=0.14285714285714285, recall=0.875, fmeasure=0.2456140350877193)

the state in which we don't really know anything about it. So - right? :: Score(precision=0.24489795918367346, recall=0.8571428571428571, fmeasure=0.38095238095238093)

For window: 9000<---->10000
Does I mean, they sort of - :: Score(precision=0.06666666666666667, recall=0.8333333333333334, fmeasure=0.1234567901234568)

If the thing is a landmark, :: Score(precision=0.06666666666666667, recall=0.8333333333333334, fmeasure=0.1234567901234568)

Noisy-ORs are a way to, uh, :: Score(precision=0.08, recall=0.8571428571428571, fmeasure=0.14634146341463417)

sort of deal with this. :: Score(precision=0.06666666666666667, recall=1.0, fmeasure=0.125)

the state in which we don't really know anything about it. So - right? :: Score(precision=0.17333333333333334, recall=0.9285714285714286, fmeasure=0.29213483146067415)

So, for example, suppose that the person - I mean, suppose the thing that they talked about is a landmark. :: Score(precision=0.25333333333333335, recall=1.0, fmeasure=0.4042553191489362)

But none of the other - sort of cues really apply. :: Score(precision=0.13333333333333333, recall=1.0, fmeasure=0.23529411764705882)

For window: 9200<---->10200
Noisy-ORs are a way to, uh, :: Score(precision=0.1206896551724138, recall=1.0, fmeasure=0.21538461538461542)

sort of deal with this. :: Score(precision=0.08620689655172414, recall=1.0, fmeasure=0.15873015873015872)

The idea is to have these intermediate nodes. :: Score(precision=0.13793103448275862, recall=1.0, fmeasure=0.2424242424242424)

the state in which we don't really know anything about it. So - right? :: Score(precision=0.22413793103448276, recall=0.9285714285714286, fmeasure=0.3611111111111111)

Right? So we come up with these little tables for each of those :: Score(precision=0.20689655172413793, recall=0.9230769230769231, fmeasure=0.3380281690140845)

For window: 9400<---->10400
If the thing is a landmark, :: Score(precision=0.06976744186046512, recall=1.0, fmeasure=0.13043478260869565)

the state in which we don't really know anything about it. So - right? :: Score(precision=0.1511627906976744, recall=0.9285714285714286, fmeasure=0.26)

The idea is that, each of these E_I - :: Score(precision=0.10465116279069768, recall=1.0, fmeasure=0.18947368421052632)

represents what this would be - :: Score(precision=0.05813953488372093, recall=1.0, fmeasure=0.10989010989010987)

if all the other ones were in the distinguish state. Right? :: Score(precision=0.11627906976744186, recall=0.9090909090909091, fmeasure=0.20618556701030924)

But none of the other - sort of cues really apply. :: Score(precision=0.11627906976744186, recall=1.0, fmeasure=0.20833333333333334)

The this would just represent the probability distribution of this, :: Score(precision=0.11627906976744186, recall=1.0, fmeasure=0.20833333333333334)

For window: 9600<---->10600
So, this is - :: Score(precision=0.05660377358490566, recall=1.0, fmeasure=0.10714285714285715)

So, the idea is that, um, :: Score(precision=0.11320754716981132, recall=1.0, fmeasure=0.2033898305084746)

The idea is to have these intermediate nodes. :: Score(precision=0.1320754716981132, recall=0.875, fmeasure=0.22950819672131148)

So, the idea is that, um, you have these intermediate nodes, right? E_one, E_two, E_three and E_four? :: Score(precision=0.39622641509433965, recall=1.0, fmeasure=0.5675675675675675)

So, this is the Heckerman paper you're working with? Good. :: Score(precision=0.20754716981132076, recall=1.0, fmeasure=0.34375000000000006)

The idea is that, each of these E_I - :: Score(precision=0.16981132075471697, recall=1.0, fmeasure=0.2903225806451613)

represents what this would be - :: Score(precision=0.09433962264150944, recall=1.0, fmeasure=0.1724137931034483)

if all the other ones were in the distinguish state. Right? :: Score(precision=0.18867924528301888, recall=0.9090909090909091, fmeasure=0.3125)

For window: 9800<---->10800
There is a - a - a general kind of idea of shortcutting the full C_P_T. the full conditional probability table - with some function. :: Score(precision=0.3728813559322034, recall=0.9166666666666666, fmeasure=0.5301204819277109)

O_K? Which you choose appropriately for each case. So, depending on what your situation is, there are different functions which are most appropriate. :: Score(precision=0.3898305084745763, recall=0.9583333333333334, fmeasure=0.5542168674698795)

For window: 10000<---->11000
we don't have to :: Score(precision=0.07692307692307693, recall=1.0, fmeasure=0.14285714285714288)

I mean, in some - it seems very plausible in some sense, where we will be likely to not be - observe some of the stuff. :: Score(precision=0.3384615384615385, recall=0.9166666666666666, fmeasure=0.49438202247191015)

Cuz we don't have the access to the information. :: Score(precision=0.13846153846153847, recall=0.9, fmeasure=0.24)

at saying, "if you have no current information about this variable just take the prior for that." :: Score(precision=0.26153846153846155, recall=1.0, fmeasure=0.41463414634146345)

For window: 10200<---->11200
quadruplets of - well, N_duplets of, uh, E_Vs. :: Score(precision=0.20454545454545456, recall=1.0, fmeasure=0.339622641509434)

right? That you could - :: Score(precision=0.09090909090909091, recall=1.0, fmeasure=0.16666666666666669)

For window: 10400<---->11400
that's where it - :: Score(precision=0.07547169811320754, recall=1.0, fmeasure=0.14035087719298245)

Right. That's one of the problems, is, Is - is, Where would Where would it all come from? :: Score(precision=0.32075471698113206, recall=0.9444444444444444, fmeasure=0.4788732394366197)

way of referring to this, because :: Score(precision=0.11320754716981132, recall=1.0, fmeasure=0.2033898305084746)

the Noisy-OR is only one instance. :: Score(precision=0.1320754716981132, recall=1.0, fmeasure=0.23333333333333334)

For window: 10600<---->11600
There is a I mean, if if - if you decide what's - what is appropriate, is probablistic evidence combination, you can write a function :: Score(precision=0.46153846153846156, recall=1.0, fmeasure=0.631578947368421)

at saying, "if you have no current information about this variable just take the prior for that." :: Score(precision=0.3269230769230769, recall=1.0, fmeasure=0.4927536231884058)

For window: 10800<---->11800
at saying, "if you have no current information about this variable just take the prior for that." :: Score(precision=0.2786885245901639, recall=1.0, fmeasure=0.43589743589743585)

O_K? that's what they're real good at. :: Score(precision=0.16393442622950818, recall=1.0, fmeasure=0.28169014084507044)

and, so forth. So that, they're good at. But the other problem is, how do you fill in all these numbers? :: Score(precision=0.29508196721311475, recall=0.8181818181818182, fmeasure=0.4337349397590361)

And I think that's the one he was getting at. :: Score(precision=0.18032786885245902, recall=1.0, fmeasure=0.3055555555555556)

For window: 11000<---->12000
Uh, you know - :: Score(precision=0.02830188679245283, recall=1.0, fmeasure=0.055045871559633024)

Yeah. So, um - Recall that, uh, :: Score(precision=0.04716981132075472, recall=0.8333333333333334, fmeasure=0.0892857142857143)

So, this is - :: Score(precision=0.02830188679245283, recall=1.0, fmeasure=0.055045871559633024)

So, really, What a - A Noisy-OR seems to kind of :: Score(precision=0.10377358490566038, recall=1.0, fmeasure=0.18803418803418803)

Yeah, it - it - that's true. It is is also more neural-net-like, although - :: Score(precision=0.14150943396226415, recall=1.0, fmeasure=0.24793388429752064)

Uh, it isn't necessarily sum - :: Score(precision=0.05660377358490566, recall=1.0, fmeasure=0.10714285714285715)

uh, you know, sum of weights or anything like that. :: Score(precision=0.09433962264150944, recall=1.0, fmeasure=0.1724137931034483)

and if it's a garden, :: Score(precision=0.05660377358490566, recall=1.0, fmeasure=0.10714285714285715)

Right? In a sense. You know. :: Score(precision=0.04716981132075472, recall=0.8333333333333334, fmeasure=0.0892857142857143)

For window: 11200<---->12200
Uh, you know - :: Score(precision=0.04285714285714286, recall=1.0, fmeasure=0.0821917808219178)

it's a Noisy-arg-max or a Noisy-whatever. :: Score(precision=0.14285714285714285, recall=1.0, fmeasure=0.25)

Yeah, it - it - that's true. It is is also more neural-net-like, although - :: Score(precision=0.21428571428571427, recall=1.0, fmeasure=0.35294117647058826)

Uh, it isn't necessarily sum - :: Score(precision=0.08571428571428572, recall=1.0, fmeasure=0.15789473684210528)

uh, you know, sum of weights or anything like that. :: Score(precision=0.14285714285714285, recall=1.0, fmeasure=0.25)

Right? In a sense. You know. :: Score(precision=0.07142857142857142, recall=0.8333333333333334, fmeasure=0.13157894736842105)

For window: 11400<---->12400
So, this is - :: Score(precision=0.03614457831325301, recall=1.0, fmeasure=0.06976744186046512)

If you don't, you look up the hierarchy, :: Score(precision=0.0963855421686747, recall=0.8888888888888888, fmeasure=0.17391304347826086)

If you don't, you just go up the hierarchy to the first place you find one. :: Score(precision=0.20481927710843373, recall=1.0, fmeasure=0.34)

So, when we get to Wu, :: Score(precision=0.07228915662650602, recall=1.0, fmeasure=0.1348314606741573)

We'll see what he says about that. :: Score(precision=0.0963855421686747, recall=1.0, fmeasure=0.1758241758241758)

we have to get them to - :: Score(precision=0.060240963855421686, recall=0.8333333333333334, fmeasure=0.11235955056179775)

For window: 11600<---->12600
that the uh - :: Score(precision=0.04285714285714286, recall=1.0, fmeasure=0.0821917808219178)

The hierarchy that comes with the ontology :: Score(precision=0.1, recall=1.0, fmeasure=0.18181818181818182)

is just what you want for this. So that - :: Score(precision=0.12857142857142856, recall=1.0, fmeasure=0.22784810126582278)

So, when we get to Wu, :: Score(precision=0.08571428571428572, recall=1.0, fmeasure=0.15789473684210528)

We'll see what he says about that. :: Score(precision=0.11428571428571428, recall=1.0, fmeasure=0.20512820512820512)

But it's, uh - Well, it strikes me as a What :: Score(precision=0.12857142857142856, recall=0.8181818181818182, fmeasure=0.2222222222222222)

If we get the mechanism, :: Score(precision=0.07142857142857142, recall=1.0, fmeasure=0.13333333333333333)

For window: 11800<---->12800
So, this is - :: Score(precision=0.030303030303030304, recall=1.0, fmeasure=0.05882352941176471)

and if it's a garden, :: Score(precision=0.050505050505050504, recall=0.8333333333333334, fmeasure=0.09523809523809525)

If you don't, you look up the hierarchy, :: Score(precision=0.08080808080808081, recall=0.8888888888888888, fmeasure=0.14814814814814817)

If you don't, you just go up the hierarchy to the first place you find one. :: Score(precision=0.1717171717171717, recall=1.0, fmeasure=0.29310344827586204)

And, then if you - :: Score(precision=0.04040404040404041, recall=1.0, fmeasure=0.07766990291262137)

And it seems to me the obvious thing to do, unless :: Score(precision=0.1111111111111111, recall=1.0, fmeasure=0.19999999999999998)

we find a reason to do something different. :: Score(precision=0.08080808080808081, recall=1.0, fmeasure=0.14953271028037382)

So, we are - but we - we're not doing the ontology, so we have to get to whoever is doing the - ultimately, :: Score(precision=0.18181818181818182, recall=0.8181818181818182, fmeasure=0.2975206611570248)

we have to get them to - :: Score(precision=0.050505050505050504, recall=0.8333333333333334, fmeasure=0.09523809523809525)

For window: 12000<---->13000
and if it's a garden, :: Score(precision=0.058823529411764705, recall=0.8333333333333334, fmeasure=0.10989010989010989)

And, if As I say, if you know about a specific object, you put it there. This is part of what Dekai was doing. :: Score(precision=0.23529411764705882, recall=0.8333333333333334, fmeasure=0.3669724770642202)

And, then if you - :: Score(precision=0.047058823529411764, recall=1.0, fmeasure=0.0898876404494382)

So, that's a very pretty relationship between :: Score(precision=0.09411764705882353, recall=1.0, fmeasure=0.17204301075268816)

these local vectors and the ontology. :: Score(precision=0.07058823529411765, recall=1.0, fmeasure=0.13186813186813187)

And it seems to me the obvious thing to do, unless :: Score(precision=0.12941176470588237, recall=1.0, fmeasure=0.22916666666666669)

we find a reason to do something different. :: Score(precision=0.09411764705882353, recall=1.0, fmeasure=0.17204301075268816)

For window: 12200<---->13200
For window: 12400<---->13400
that the uh - :: Score(precision=0.034482758620689655, recall=1.0, fmeasure=0.06666666666666667)

And some other stuff. And I :: Score(precision=0.05747126436781609, recall=0.8333333333333334, fmeasure=0.1075268817204301)

Uh, you know - :: Score(precision=0.034482758620689655, recall=1.0, fmeasure=0.06666666666666667)

do the - eh - :: Score(precision=0.034482758620689655, recall=1.0, fmeasure=0.06666666666666667)

But, I - I - :: Score(precision=0.034482758620689655, recall=1.0, fmeasure=0.06666666666666667)

eh, eh, apologized that it will take him another through - :: Score(precision=0.11494252873563218, recall=1.0, fmeasure=0.20618556701030927)

two to three days because they're having really trouble getting the upper level :: Score(precision=0.16091954022988506, recall=1.0, fmeasure=0.2772277227722772)

But, nevertheless, it's going to be there by by, uh, next Monday and I will show you what's - what some examples from that for towers, and stuff. :: Score(precision=0.3333333333333333, recall=1.0, fmeasure=0.5)

what I don't think is ever going to be in the ontology, is sort of, you know, the likelihood of, eh, people entering :: Score(precision=0.22988505747126436, recall=0.8333333333333334, fmeasure=0.36036036036036034)

And I don't know. :: Score(precision=0.05747126436781609, recall=1.0, fmeasure=0.10869565217391304)

For window: 12600<---->13600
town halls, and looking at town halls, and approaching town halls, :: Score(precision=0.16071428571428573, recall=0.8181818181818182, fmeasure=0.2686567164179105)

And it will know if any of those have institutional meanings. :: Score(precision=0.19642857142857142, recall=1.0, fmeasure=0.3283582089552239)

So, in a sense, "I" used as Institutions for some in some sense or the other. :: Score(precision=0.2857142857142857, recall=1.0, fmeasure=0.4444444444444445)

Which makes them - :: Score(precision=0.05357142857142857, recall=1.0, fmeasure=0.10169491525423728)

For window: 12800<---->13800
we have to get them to - :: Score(precision=0.10344827586206896, recall=1.0, fmeasure=0.1875)

I think that's where we have to get technically clever. :: Score(precision=0.1896551724137931, recall=1.0, fmeasure=0.3188405797101449)

We could just steal the classes in JavaBayes and then :: Score(precision=0.1724137931034483, recall=1.0, fmeasure=0.29411764705882354)

interface to them with our own code. :: Score(precision=0.1206896551724138, recall=1.0, fmeasure=0.21538461538461542)

I mean, you've been around enough to - :: Score(precision=0.13793103448275862, recall=1.0, fmeasure=0.2424242424242424)

For window: 13000<---->14000
Uh, yeah. but I'm just - :: Score(precision=0.10204081632653061, recall=0.8333333333333334, fmeasure=0.18181818181818182)

We could just steal the classes in JavaBayes and then :: Score(precision=0.20408163265306123, recall=1.0, fmeasure=0.3389830508474576)

interface to them with our own code. :: Score(precision=0.14285714285714285, recall=1.0, fmeasure=0.25)

Well, then you'd have to break all of your Bayes-nets into smaller Bayes-nets, with all the - :: Score(precision=0.32653061224489793, recall=0.8421052631578947, fmeasure=0.4705882352941176)

Yeah, but I'm just - :: Score(precision=0.10204081632653061, recall=1.0, fmeasure=0.1851851851851852)

For window: 13200<---->14200
that the uh - :: Score(precision=0.04477611940298507, recall=1.0, fmeasure=0.08571428571428572)

uh, vectors that we need. So, we'd have our own little things so that whenever we needed one, we'd just use the ontology to get the type, :: Score(precision=0.3582089552238806, recall=0.8275862068965517, fmeasure=0.5)

and whether we can put those in Java Bayes, and all that sort of stuff, :: Score(precision=0.22388059701492538, recall=1.0, fmeasure=0.36585365853658536)

is, uh - is the bigger deal. :: Score(precision=0.08955223880597014, recall=1.0, fmeasure=0.1643835616438356)

We could just steal the classes in JavaBayes and then :: Score(precision=0.14925373134328357, recall=1.0, fmeasure=0.2597402597402597)

interface to them with our own code. :: Score(precision=0.1044776119402985, recall=1.0, fmeasure=0.18918918918918917)

For window: 13400<---->14400
So you could have four different Bayes-nets that you're running, and then run your own - write your own function that would take the output of those four, :: Score(precision=0.4915254237288136, recall=1.0, fmeasure=0.6590909090909091)

For window: 13600<---->14600
that the uh - :: Score(precision=0.03296703296703297, recall=1.0, fmeasure=0.06382978723404255)

But, I - I - :: Score(precision=0.03296703296703297, recall=1.0, fmeasure=0.06382978723404255)

is worth talking to on this, :: Score(precision=0.06593406593406594, recall=1.0, fmeasure=0.12371134020618557)

said that he actually did :: Score(precision=0.054945054945054944, recall=1.0, fmeasure=0.10416666666666666)

hack some combining functions into JavaBayes. :: Score(precision=0.06593406593406594, recall=1.0, fmeasure=0.12371134020618557)

whether it was an an easy thing, a natural thing, or whether he had to do some violence to it to make it work. :: Score(precision=0.26373626373626374, recall=1.0, fmeasure=0.4173913043478261)

I don't see why the, uh, combining functions have to be directly hacked into JavaBayes. I mean, they're used to create tables so we can just make our own little functions that create tables in X_M_L. :: Score(precision=0.42857142857142855, recall=0.975, fmeasure=0.5954198473282443)

